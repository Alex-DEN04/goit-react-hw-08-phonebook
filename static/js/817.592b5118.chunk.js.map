{"version":3,"file":"static/js/817.592b5118.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/layout/dist/chunk-5FO2ZLZM.mjs","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/layout/dist/chunk-QJDVAY5Z.mjs","../node_modules/@chakra-ui/card/dist/chunk-4DHADF5X.mjs","../node_modules/@chakra-ui/card/dist/chunk-S432VF2S.mjs","../node_modules/@chakra-ui/card/dist/chunk-W3H6TFKV.mjs","../node_modules/@chakra-ui/layout/dist/chunk-B2MGPQRJ.mjs","../node_modules/@chakra-ui/card/dist/chunk-KKEJMMX3.mjs","../node_modules/@chakra-ui/card/dist/chunk-V3HPETQ4.mjs","../node_modules/@chakra-ui/icons/dist/chunk-HFJCK6H7.mjs","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","../node_modules/@chakra-ui/toast/dist/chunk-ENIANY67.mjs","../node_modules/@chakra-ui/icons/dist/chunk-TEXEZHMQ.mjs","components/ContactForm/ContactForm.jsx","../node_modules/nanoid/index.browser.js","components/Filter/Filter.jsx","../node_modules/@chakra-ui/layout/dist/chunk-IWVFML3N.mjs","pages/Contacts/Contacts.jsx"],"sourcesContent":["// src/grid.tsx\nimport {\n  chakra,\n  forwardRef\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Grid = forwardRef(function Grid2(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props;\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns\n  };\n  return /* @__PURE__ */ jsx(chakra.div, { ref, __css: styles, ...rest });\n});\nGrid.displayName = \"Grid\";\n\nexport {\n  Grid\n};\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import {\n  Grid\n} from \"./chunk-5FO2ZLZM.mjs\";\n\n// src/simple-grid.tsx\nimport {\n  forwardRef,\n  getToken,\n  useTheme\n} from \"@chakra-ui/system\";\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar SimpleGrid = forwardRef(\n  function SimpleGrid2(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } = props;\n    const theme = useTheme();\n    const templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme) : countToColumns(columns);\n    return /* @__PURE__ */ jsx(\n      Grid,\n      {\n        ref,\n        gap: spacing,\n        columnGap: spacingX,\n        rowGap: spacingY,\n        templateColumns,\n        ...rest\n      }\n    );\n  }\n);\nSimpleGrid.displayName = \"SimpleGrid\";\nfunction toPx(n) {\n  return typeof n === \"number\" ? `${n}px` : n;\n}\nfunction widthToColumns(width, theme) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme);\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`;\n  });\n}\nfunction countToColumns(count) {\n  return mapResponsive(\n    count,\n    (value) => value === null ? null : `repeat(${value}, minmax(0, 1fr))`\n  );\n}\n\nexport {\n  SimpleGrid\n};\n","// src/card-context.tsx\nimport { createStylesContext } from \"@chakra-ui/system\";\nvar [CardStylesProvider, useCardStyles] = createStylesContext(\"Card\");\n\nexport {\n  CardStylesProvider,\n  useCardStyles\n};\n","import {\n  CardStylesProvider\n} from \"./chunk-4DHADF5X.mjs\";\n\n// src/card.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport {\n  forwardRef,\n  chakra,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Card = forwardRef(function Card2(props, ref) {\n  const {\n    className,\n    children,\n    direction = \"column\",\n    justify,\n    align,\n    ...rest\n  } = omitThemingProps(props);\n  const styles = useMultiStyleConfig(\"Card\", props);\n  return /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      ref,\n      className: cx(\"chakra-card\", className),\n      __css: {\n        display: \"flex\",\n        flexDirection: direction,\n        justifyContent: justify,\n        alignItems: align,\n        position: \"relative\",\n        minWidth: 0,\n        wordWrap: \"break-word\",\n        ...styles.container\n      },\n      ...rest,\n      children: /* @__PURE__ */ jsx(CardStylesProvider, { value: styles, children })\n    }\n  );\n});\n\nexport {\n  Card\n};\n","import {\n  useCardStyles\n} from \"./chunk-4DHADF5X.mjs\";\n\n// src/card-header.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { forwardRef, chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar CardHeader = forwardRef(\n  function CardHeader2(props, ref) {\n    const { className, ...rest } = props;\n    const styles = useCardStyles();\n    return /* @__PURE__ */ jsx(\n      chakra.div,\n      {\n        ref,\n        className: cx(\"chakra-card__header\", className),\n        __css: styles.header,\n        ...rest\n      }\n    );\n  }\n);\n\nexport {\n  CardHeader\n};\n","// src/heading.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Heading = forwardRef(function Heading2(props, ref) {\n  const styles = useStyleConfig(\"Heading\", props);\n  const { className, ...rest } = omitThemingProps(props);\n  return /* @__PURE__ */ jsx(\n    chakra.h2,\n    {\n      ref,\n      className: cx(\"chakra-heading\", props.className),\n      ...rest,\n      __css: styles\n    }\n  );\n});\nHeading.displayName = \"Heading\";\n\nexport {\n  Heading\n};\n","import {\n  useCardStyles\n} from \"./chunk-4DHADF5X.mjs\";\n\n// src/card-body.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { forwardRef, chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar CardBody = forwardRef(function CardBody2(props, ref) {\n  const { className, ...rest } = props;\n  const styles = useCardStyles();\n  return /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      ref,\n      className: cx(\"chakra-card__body\", className),\n      __css: styles.body,\n      ...rest\n    }\n  );\n});\n\nexport {\n  CardBody\n};\n","import {\n  useCardStyles\n} from \"./chunk-4DHADF5X.mjs\";\n\n// src/card-footer.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport {\n  forwardRef,\n  chakra\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar CardFooter = forwardRef(\n  function CardFooter2(props, ref) {\n    const { className, justify, ...rest } = props;\n    const styles = useCardStyles();\n    return /* @__PURE__ */ jsx(\n      chakra.div,\n      {\n        ref,\n        className: cx(\"chakra-card__footer\", className),\n        __css: {\n          display: \"flex\",\n          justifyContent: justify,\n          ...styles.footer\n        },\n        ...rest\n      }\n    );\n  }\n);\n\nexport {\n  CardFooter\n};\n","// src/Delete.tsx\nimport { createIcon } from \"@chakra-ui/icon\";\nimport { jsx } from \"react/jsx-runtime\";\nvar DeleteIcon = createIcon({\n  displayName: \"DeleteIcon\",\n  path: /* @__PURE__ */ jsx(\"g\", { fill: \"currentColor\", children: /* @__PURE__ */ jsx(\"path\", { d: \"M19.452 7.5H4.547a.5.5 0 00-.5.545l1.287 14.136A2 2 0 007.326 24h9.347a2 2 0 001.992-1.819L19.95 8.045a.5.5 0 00-.129-.382.5.5 0 00-.369-.163zm-9.2 13a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zm5 0a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zM22 4h-4.75a.25.25 0 01-.25-.25V2.5A2.5 2.5 0 0014.5 0h-5A2.5 2.5 0 007 2.5v1.25a.25.25 0 01-.25.25H2a1 1 0 000 2h20a1 1 0 000-2zM9 3.75V2.5a.5.5 0 01.5-.5h5a.5.5 0 01.5.5v1.25a.25.25 0 01-.25.25h-5.5A.25.25 0 019 3.75z\" }) })\n});\n\nexport {\n  DeleteIcon\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport {\n  Button,\n  Card,\n  CardHeader,\n  Heading,\n  CardBody,\n  Text,\n  CardFooter,\n  Flex,\n  Avatar,\n  Box,\n} from '@chakra-ui/react';\nimport { DeleteIcon } from '@chakra-ui/icons';\n\nimport { deleteContact } from 'redux/index';\n\nexport const Contact = ({ item: { name, number, id } }) => {\n  const dispatch = useDispatch();\n  return (\n    <Card\n      align=\"center\"\n      bg=\"white\"\n      p={5}\n      borderTop=\"4px\"\n      borderColor=\"teal.400\"\n    >\n      <CardHeader p={0} pb={3}>\n        <Flex align=\"center\" gap={3}>\n          <Box>\n            <Avatar w={6} h={6} />\n          </Box>\n          <Box>\n            <Heading as=\"h3\" size=\"sm\">\n              {name}\n            </Heading>\n          </Box>\n        </Flex>\n      </CardHeader>\n      <CardBody p={0} pb={3}>\n        <Text>{number}</Text>\n      </CardBody>\n      <CardFooter p={0} pb={3}>\n        <Button\n          leftIcon={<DeleteIcon />}\n          colorScheme=\"teal\"\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => dispatch(deleteContact(id))}\n        >\n          Delete\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n};\n\nContact.propTypes = {\n  item: PropTypes.objectOf(PropTypes.string),\n};\n","import { Box, SimpleGrid } from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport { fetchContacts } from 'redux/index';\nimport { Contact } from '../Contact/Contact';\nimport { getContacts, getFilter } from 'redux/index';\nimport { Loader } from 'components/Loader/Loader';\nimport { getIsLoading } from 'redux/index';\n\nexport const ContactList = () => {\n  const items = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const loading = useSelector(getIsLoading);\n\n  const getFilterContacts = () => {\n    if (!filter) {\n      return items;\n    }\n    const filteredContacts = items.filter(item => {\n      const normolizedFilter = filter.toLowerCase();\n      const normalizedName = item.name.toLowerCase();\n      const result = normalizedName.includes(normolizedFilter);\n      return result;\n    });\n    return filteredContacts;\n  };\n  const contacts = getFilterContacts();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <SimpleGrid as=\"ul\" columns={4} spacing={5} minChildWidth={200}>\n      {loading && <Loader />}\n      {items &&\n        contacts.map(contact => (\n          <Box as=\"li\" listStyleType=\"none\" key={contact.id}>\n            <Contact item={contact}></Contact>\n          </Box>\n        ))}\n    </SimpleGrid>\n  );\n};\n","import {\n  useToastOptionContext\n} from \"./chunk-SBZF3S2Z.mjs\";\nimport {\n  createToastFn\n} from \"./chunk-PE6CKLNB.mjs\";\n\n// src/use-toast.tsx\nimport { useChakra } from \"@chakra-ui/system\";\nimport { useMemo } from \"react\";\nfunction useToast(options) {\n  const { theme } = useChakra();\n  const defaultOptions = useToastOptionContext();\n  return useMemo(\n    () => createToastFn(theme.direction, {\n      ...defaultOptions,\n      ...options\n    }),\n    [options, theme.direction, defaultOptions]\n  );\n}\nvar use_toast_default = useToast;\n\nexport {\n  useToast,\n  use_toast_default\n};\n","// src/Edit.tsx\nimport { createIcon } from \"@chakra-ui/icon\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar EditIcon = createIcon({\n  displayName: \"EditIcon\",\n  path: /* @__PURE__ */ jsxs(\"g\", { fill: \"none\", stroke: \"currentColor\", strokeLinecap: \"round\", strokeWidth: \"2\", children: [\n    /* @__PURE__ */ jsx(\"path\", { d: \"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" }),\n    /* @__PURE__ */ jsx(\"path\", { d: \"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\" })\n  ] })\n});\n\nexport {\n  EditIcon\n};\n","import { nanoid } from 'nanoid';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Input,\n  FormErrorMessage,\n  useToast,\n} from '@chakra-ui/react';\nimport { EditIcon } from '@chakra-ui/icons';\nimport { Form, Field } from 'formik';\n\nimport { getContacts } from 'redux/index';\nimport { addContact } from 'redux/index';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required(),\n  number: Yup.string().min(4).max(10).required(),\n});\n\nexport const ContactForm = () => {\n  const items = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const toast = useToast();\n  const showToast = value => {\n    toast({\n      title: 'Warning',\n      description: `${value} is already in contacts`,\n      duration: 5000,\n      isClosable: true,\n      status: 'warning',\n      position: 'top',\n      variant: 'top-accent',\n    });\n  };\n\n  const handleSubmit = (values, actions) => {\n    values.id = nanoid();\n    actions.resetForm();\n\n    const existsName = items.some(\n      ({ name }) =>\n        name.toLowerCase().trim() === values.name.toLowerCase().trim()\n    );\n    if (existsName) {\n      return showToast(values.name);\n    }\n    dispatch(addContact(values));\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      {() => (\n        <Form>\n          <Flex flexDirection=\"column\" justify=\"center\" align=\"center\">\n            <Field name=\"name\" validate={validationSchema}>\n              {({ field, form }) => (\n                <FormControl\n                  mb={2}\n                  isInvalid={form.errors.name && form.touched.name}\n                >\n                  <FormLabel htmlFor=\"name\" fontSize=\"md\" fontWeight=\"normal\">\n                    Name\n                  </FormLabel>\n                  <Input\n                    {...field}\n                    bg=\"withe\"\n                    name=\"name\"\n                    type=\"text\"\n                    placeholder=\"Martin Holst\"\n                  />\n                  <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n                </FormControl>\n              )}\n            </Field>\n            <Field name=\"number\" validate={validationSchema}>\n              {({ field, form }) => (\n                <FormControl\n                  mb={6}\n                  isInvalid={form.errors.number && form.touched.number}\n                >\n                  <FormLabel htmlFor=\"tel\" fontSize=\"md\" fontWeight=\"normal\">\n                    Number\n                  </FormLabel>\n                  <Input {...field} bg=\"withe\" name=\"number\" type=\"tel\" />\n                  <FormErrorMessage>{form.errors.number}</FormErrorMessage>\n                </FormControl>\n              )}\n            </Field>\n            <Button\n              leftIcon={<EditIcon />}\n              bg=\"white\"\n              color=\"teal.400\"\n              type=\"submit\"\n            >\n              Add contact\n            </Button>\n          </Flex>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { FormControl, FormLabel, Input } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\n\nimport { setFilter } from 'redux/index';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  return (\n    <FormControl p={4} maxW={350}>\n      <FormLabel htmlFor=\"\" fontSize=\"lg\" fontWeight=\"bold\">\n        Find contacts by name\n      </FormLabel>\n      <Input\n        borderColor=\"teal.300\"\n        mb={4}\n        type=\"text\"\n        placeholder=\"Martin Holst\"\n        onChange={e => dispatch(setFilter(e.target.value))}\n      />\n    </FormControl>\n  );\n};\n","// src/grid-item.tsx\nimport {\n  forwardRef,\n  chakra\n} from \"@chakra-ui/system\";\nimport { compact } from \"@chakra-ui/object-utils\";\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction spanFn(span) {\n  return mapResponsive(\n    span,\n    (value) => value === \"auto\" ? \"auto\" : `span ${value}/span ${value}`\n  );\n}\nvar GridItem = forwardRef(function GridItem2(props, ref) {\n  const {\n    area,\n    colSpan,\n    colStart,\n    colEnd,\n    rowEnd,\n    rowSpan,\n    rowStart,\n    ...rest\n  } = props;\n  const styles = compact({\n    gridArea: area,\n    gridColumn: spanFn(colSpan),\n    gridRow: spanFn(rowSpan),\n    gridColumnStart: colStart,\n    gridColumnEnd: colEnd,\n    gridRowStart: rowStart,\n    gridRowEnd: rowEnd\n  });\n  return /* @__PURE__ */ jsx(chakra.div, { ref, __css: styles, ...rest });\n});\nGridItem.displayName = \"GridItem\";\n\nexport {\n  GridItem\n};\n","import { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { Grid, GridItem } from '@chakra-ui/react';\n\nexport default function Contacts() {\n  return (\n    <Grid templateColumns=\"repeat(4, 1fr)\" bg=\"gray.50\">\n      <GridItem as=\"aside\" colSpan=\"1\" p={4} minHeight=\"100vh\" bg=\"teal.400\">\n        <ContactForm />\n      </GridItem>\n      <GridItem colSpan=\"3\" p={5}>\n        <Filter />\n        <ContactList />\n      </GridItem>\n    </Grid>\n  );\n}\n"],"names":["Grid","forwardRef","props","ref","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","styles","display","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","jsx","chakra","__css","displayName","Object","freeze","mapResponsive","prop","mapper","Array","isArray","map","item","isObject","keys","reduce","result","key","SimpleGrid","columns","spacingX","spacingY","spacing","minChildWidth","theme","useTheme","width","value","n","_value","getToken","widthToColumns","createStylesContext","CardStylesProvider","useCardStyles","Card","omitThemingProps","className","children","direction","justify","align","useMultiStyleConfig","cx","flexDirection","justifyContent","alignItems","position","minWidth","wordWrap","container","CardHeader","header","Heading","useStyleConfig","CardBody","body","CardFooter","footer","DeleteIcon","createIcon","path","fill","d","Contact","name","number","id","dispatch","useDispatch","bg","p","borderTop","borderColor","pb","w","h","as","size","leftIcon","colorScheme","variant","onClick","deleteContact","ContactList","items","useSelector","getContacts","filter","getFilter","loading","getIsLoading","contacts","normolizedFilter","toLowerCase","includes","useEffect","fetchContacts","Loader","contact","listStyleType","useToast","options","useChakra","defaultOptions","useToastOptionContext","useMemo","createToastFn","EditIcon","jsxs","stroke","strokeLinecap","strokeWidth","initialValues","validationSchema","Yup","shape","required","min","max","ContactForm","toast","onSubmit","values","actions","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","resetForm","some","trim","title","description","duration","isClosable","status","addContact","validate","field","form","mb","isInvalid","errors","touched","htmlFor","fontSize","fontWeight","I","type","placeholder","color","Filter","maxW","onChange","e","setFilter","target","spanFn","span","GridItem","area","colSpan","colStart","colEnd","rowEnd","rowSpan","rowStart","compact","gridArea","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","Contacts","minHeight"],"sourceRoot":""}