{"version":3,"file":"static/js/643.bd6625aa.chunk.js","mappings":"8TAeMA,EAAgB,CACpBC,GAAI,GACJC,KAAM,GACNC,MAAO,GACPC,SAAU,IAENC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CL,KAAMI,EAAAA,KAAaE,WACnBL,MAAOG,EAAAA,KAAaE,WACpBJ,SAAUE,EAAAA,KAAaE,aAGV,SAASC,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAOjB,OACE,+BACE,SAAC,KAAD,CACEX,cAAeA,EACfK,iBAAkBA,EAClBO,SAXe,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BD,EAAOZ,IAAKc,EAAAA,EAAAA,MACZL,GAASM,EAAAA,EAAAA,IAASH,IAClBC,GACD,EAIG,SAKG,kBACC,SAAC,KAAD,CAAKG,GAAG,UAAUC,EAAG,EAAGC,KAAM,IAA9B,UACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOjB,KAAK,OAAOkB,SAAUf,EAA7B,SACG,gBAAGgB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,UAAC,KAAD,CACEC,YAAU,EACVC,UAAWF,EAAKG,OAAOvB,MAAQoB,EAAKI,QAAQxB,KAF9C,WAIE,SAAC,IAAD,CAAWyB,QAAQ,OAAOC,SAAS,KAAKC,WAAW,SAAnD,mBAGA,SAAC,EAAAC,GAAD,kBACMT,GADN,IAEEU,YAAY,WACZC,GAAI,EACJ9B,KAAK,OACL+B,KAAK,OACLC,YAAY,gBAEd,SAAC,KAAD,UAAmBZ,EAAKG,OAAOvB,SAhBlC,KAoBH,SAAC,KAAD,CAAOA,KAAK,QAAQkB,SAAUf,EAA9B,SACG,gBAAGgB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,UAAC,KAAD,CACEC,YAAU,EACVC,UAAWF,EAAKG,OAAOtB,OAASmB,EAAKI,QAAQvB,MAF/C,WAIE,SAAC,IAAD,CACEwB,QAAQ,QACRC,SAAS,KACTC,WAAW,SAHb,oBAOA,SAAC,EAAAC,GAAD,kBACMT,GADN,IAEEU,YAAY,WACZC,GAAI,EACJ9B,KAAK,QACL+B,KAAK,QACLC,YAAY,yBAEd,SAAC,KAAD,UAAmBZ,EAAKG,OAAOtB,UApBlC,KAwBH,SAAC,KAAD,CAAOD,KAAK,WAAWkB,SAAUf,EAAjC,SACG,gBAAGgB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,UAAC,KAAD,CACEC,YAAU,EACVC,UAAWF,EAAKG,OAAOrB,UAAYkB,EAAKI,QAAQtB,SAFlD,WAIE,SAAC,IAAD,CACEuB,QAAQ,WACRC,SAAS,KACTC,WAAW,SAHb,uBAOA,SAAC,EAAAC,GAAD,kBACMT,GADN,IAEEU,YAAY,WACZC,GAAI,EACJ9B,KAAK,WACL+B,KAAK,eAEP,SAAC,KAAD,UAAmBX,EAAKG,OAAOrB,aAnBlC,KAuBH,SAAC,IAAD,CAAQ+B,GAAI,EAAGC,YAAY,OAAOH,KAAK,SAAvC,wBAzEL,KAkFR,C","sources":["pages/Register/Register.jsx"],"sourcesContent":["import { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  FormErrorMessage,\n} from '@chakra-ui/react';\n\nimport { register } from 'redux/index';\n\nconst initialValues = {\n  id: '',\n  name: '',\n  email: '',\n  password: '',\n};\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required(),\n  email: Yup.string().required(),\n  password: Yup.string().required(),\n});\n\nexport default function Register() {\n  const dispatch = useDispatch();\n  const handleSubmit = (values, { resetForm }) => {\n    values.id = nanoid();\n    dispatch(register(values));\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        {() => (\n          <Box as=\"section\" p={3} maxW={450}>\n            <Form>\n              <Field name=\"name\" validate={validationSchema}>\n                {({ field, form }) => (\n                  <FormControl\n                    isRequired\n                    isInvalid={form.errors.name && form.touched.name}\n                  >\n                    <FormLabel htmlFor=\"name\" fontSize=\"lg\" fontWeight=\"medium\">\n                      Name\n                    </FormLabel>\n                    <Input\n                      {...field}\n                      borderColor=\"teal.300\"\n                      mb={4}\n                      name=\"name\"\n                      type=\"name\"\n                      placeholder=\"John Wick\"\n                    />\n                    <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n                  </FormControl>\n                )}\n              </Field>\n              <Field name=\"email\" validate={validationSchema}>\n                {({ field, form }) => (\n                  <FormControl\n                    isRequired\n                    isInvalid={form.errors.email && form.touched.email}\n                  >\n                    <FormLabel\n                      htmlFor=\"email\"\n                      fontSize=\"lg\"\n                      fontWeight=\"medium\"\n                    >\n                      Email\n                    </FormLabel>\n                    <Input\n                      {...field}\n                      borderColor=\"teal.300\"\n                      mb={4}\n                      name=\"email\"\n                      type=\"email\"\n                      placeholder=\"johnwick@gmail.com\"\n                    />\n                    <FormErrorMessage>{form.errors.email}</FormErrorMessage>\n                  </FormControl>\n                )}\n              </Field>\n              <Field name=\"password\" validate={validationSchema}>\n                {({ field, form }) => (\n                  <FormControl\n                    isRequired\n                    isInvalid={form.errors.password && form.touched.password}\n                  >\n                    <FormLabel\n                      htmlFor=\"password\"\n                      fontSize=\"lg\"\n                      fontWeight=\"medium\"\n                    >\n                      Password\n                    </FormLabel>\n                    <Input\n                      {...field}\n                      borderColor=\"teal.300\"\n                      mb={4}\n                      name=\"password\"\n                      type=\"password\"\n                    />\n                    <FormErrorMessage>{form.errors.password}</FormErrorMessage>\n                  </FormControl>\n                )}\n              </Field>\n              <Button mt={4} colorScheme=\"teal\" type=\"submit\">\n                Submit\n              </Button>\n            </Form>\n          </Box>\n        )}\n      </Formik>\n    </>\n  );\n}\n"],"names":["initialValues","id","name","email","password","validationSchema","Yup","shape","required","Register","dispatch","useDispatch","onSubmit","values","resetForm","nanoid","register","as","p","maxW","validate","field","form","isRequired","isInvalid","errors","touched","htmlFor","fontSize","fontWeight","I","borderColor","mb","type","placeholder","mt","colorScheme"],"sourceRoot":""}